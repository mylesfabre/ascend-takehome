import json
import urllib.request

goog_apiKey = 'AIzaSyA2fub6_7OjTVs1QgV1YoBmHgx34FTRj10'
url = 'https://maps.googleapis.com/maps/api/geocode/json?'

testList = [json.dumps({'address_line_one': '1370 Balsam Avenue', 'city': 'Baton Rouge', 'state': 'LA', 'zip_code': '70807'})]

def validate(addyArr):
    if addyArr:
        responses = []
        if type(addyArr) == list:
            for i in addyArr:
                data = json.loads(i)
                wanted = data['address_line_one']+' '+data['city']+' '+data['state']+' '+data['zip_code']
                formatted = wanted.replace(" ", "%20")
                request = url+'address='+formatted+'&'+'key='+goog_apiKey
                try:
                    url_response = urllib.request.urlopen(request)
                except:
                    print("\nBad HTTP Request, please check address input and try again\n")
                response = url_response.read().decode('utf-8')
                allData = json.loads(response)
                try:
                    results = allData['results'][0]
                    geometry = results['geometry']
                    location = geometry['location']
                    lat = location['lat']
                    lng = location['lng']
                except:
                    print("\nLatitude and Longitude Data Not Found for this Address\n")
                addyLatLng = json.dumps({'address_line_one': data['address_line_one'], 'city': data['city'], 'state': data['state'], 'zip_code': data['zip_code'], 'latitude': lat, 'longitude': lng})
                responses.append(addyLatLng)
            return responses
        else:
            print("Invalid Input")
    else:
        print("No addresses to look up")
        return None

if __name__ == '__main__':
    print('Enter the list of addresses:')
    x = input()
    print(validate(x))

assert(validate(testList) == ['{"address_line_one": "1370 Balsam Avenue", "city": "Baton Rouge", "state": "LA", "zip_code": "70807", "latitude": 30.5408294, "longitude": -91.1798335}'])
assert(validate([]) == None)
assert(validate('hello') == None)